import { circle } from "../utils/CanvasUtils";
import { Point } from "../utils/MathUtils";
import PALETTE from "./color";
import { Stage } from "./Stage";

interface Glyph {
  path?: string;
  size?: number;
  kernings?: { [index: string]: number };
}

/**
 * Kurokane-EB by Fontworks LETS
 * https://lets.fontworks.co.jp/fontworks
 */
// Paste the output object of get-font-data.ts here
const kurokaneFont: Record<string, Glyph> = {
  "0": {
    path: "m31.5 70.8c-1.3-3.3-2.2-6.7-3.2-10.1l-2.3-11.4-1.0-14.5 1.4-16.7 4.8-18.1h35.9c1.7 2.8 2.7 5.9 3.9 9.0l2.6 10.8 1.3 14.7-1.3 16.7-4.8 19.7h-37.2m23.6-56.6h-10.2v42.5h10.2v-42.5",
    size: 50,
  },
  "1": {
    path: "m46.2 71.2v-58.1h-10.3v-13.1h28.3v71.2h-18.0",
    size: 28,
  },
  "2": {
    path: "m25.2 71.2v-14.2l29.7-44.4h-25.6v-12.6h29.4l7.4 5.0 3.1 5.8 1.3 7.7-5.5 17.3-8.0 10.2-12.4 11.1h30.1v14.2h-49.6",
    size: 50,
  },
  "3": {
    path: "m42.1 69.3 11.6-29.7h-27.4v-12.5h19.6l5.9-14.5h-24.9v-12.6h27.8l8.4 4.9 4.9 12.0-3.7 10.8 6.2 5.4 3.1 10.5-3.9 13.6-14.1 17.0-13.6-5.0",
    size: 47,
  },
  "4": {
    path: "m51.5 73.1v-13.7h-27.1l-0.1-13.9 5.2-14.8 2.9-7.6 2.8-7.2 6.5-15.9 16.8 6.8-2.4 7.0-2.4 6.3h15.6v25.2h6.5v14.2h-6.5v13.7h-17.7m0.0-48.3-4.9 9.2-4.1 6.4-2.9 3.6-1.0 1.2h12.9v-20.4",
    size: 51,
  },
  "5": {
    path: "m42.5 68.2 11.0-31.0h-27.4v-37.2h42.5v13.1h-24.5v11.6h18.3l7.1 4.5 3.1 5.5 1.3 7.4-3.8 13.8-13.9 16.9-13.6-4.6",
    size: 48,
  },
  "6": {
    path: "m32.1 71.3-4.2-8.7-2.1-11.9-0.6-5.8-0.3-4.8-0.1-4.5 2.3-16.4 5.4-11.1 6.0-6.2 4.2-1.9h25.3v14.3h-24.7v12.8h23.7l1.4 1.5 2.9 4.3 2.9 7.0 1.2 9.3-1.4 10.3-5.2 11.8h-36.6m25.8-30.0h-14.6v15.8h14.6v-15.8",
    size: 51,
  },
  "7": {
    path: "m34.3 66.7 18.6-54.1h-27.0v-12.6h47.7l0.2 1.3 0.2 4.0-0.8 9.1-3.3 14.0-7.2 18.8-5.6 11.3-7.1 12.6-15.8-4.5",
    size: 48,
  },
  "8": {
    path: "m31.5 71.2c-1.2-1.7-2.1-3.5-3.2-5.3l-2.2-6.4-1.0-8.5 0.6-7.1 2.3-8.1-2.1-12.3 1.4-10.8 5.1-12.7h34.8c1.4 1.8 2.6 3.7 3.7 5.7l2.5 6.8 1.2 9.0-2.5 13.6 1.9 6.0 0.8 7.8-1.3 10.3-4.8 11.9h-37.1m25.9-56.9h-14.9v14.4h14.9v-14.4m0.0 28.5h-14.9v14.2h14.9v-14.2",
    size: 50,
  },
  "9": {
    path: "m27.7 71.3v-14.2h29.4v-12.8h-25.9l-5.2-8.4-1.5-9.7 1.0-9.6 2.2-8.4 2.2-6.0 1.0-2.2h33.8l6.3 8.7 3.3 11.9 0.8 5.8 0.6 8.1c0.1 1.8-0.1 3.6-0.2 5.4l-0.6 4.4-1.0 5.5-4.2 11.8-8.1 9.7h-33.9m29.4-57.0h-16.1v15.8h16.1v-15.8",
    size: 51,
  },
  "!": {
    path: "m41.9 45.6v-45.6h16.2v45.6h-16.2zm0.0 25.6v-16.0h16.2v16.0h-16.2z",
    size: 16,
  },
  "?": {
    path: "m50.6 38.0v8.1h-16.2v-20.7h15.4v-12.9h-19.5v-12.6h25.0c0.5 0.0 1.5 0.4 2.8 1.2 1.8 0.9 3.4 2.0 4.9 3.4 1.9 1.7 3.5 3.6 4.6 5.7 1.4 2.5 2.0 5.2 2.0 8.1s-0.7 5.8-2.0 8.9c-1.5 3.5-3.9 7.1-7.1 10.8zm-16.3 33.2v-16.0h16.2v16.0z",
    size: 39,
  },
  A: {
    path: "m75.7 72.7-1.2-1.3-3.4-3.7-4.7-5.9-5.6-7.9h-30.0l-7.3 17.9-13.4-5.0 27.1-66.8h22.5l30.0 65.5-14.0 7.2m-23.0-33.1-4.3-10.0-3.4-10.8-8.4 20.8h16.1",
    size: 80,
  },
  B: {
    path: "m23.9 71.2v-71.2h30.2l6.5 0.9 6.4 3.1 4.8 6.0 1.9 9.5-4.6 14.0 4.9 6.1 2.0 9.3-1.5 9.6-3.6 7.1-8.2 5.7h-38.8m30.6-56.8h-12.6v14.2h12.6v-14.2m0.4 28.4h-13.0v14.1h13.0v-14.1",
    size: 52,
  },
  C: {
    path: "m48.6 71.2-6.6-1.6-7.5-5.5-6.2-10.9-2.6-17.5 2.6-17.4 6.2-11.0 7.5-5.6 6.6-1.6h25.8v14.3h-24.3v42.7h24.3v14.2h-25.8",
    size: 49,
  },
  D: {
    path: "m20.0 71.3v-71.3h39.7l4.7 1.9 6.8 6.3 6.1 11.6 2.6 17.8c-0.1 4.4-1.0 8.6-1.9 12.9l-4.6 11.1-9.0 9.6h-44.4m37.2-57.0h-19.1v42.7h19.1v-42.7",
    size: 60,
  },
  E: {
    path: "m23.8 71.2v-71.2h52.3v14.3h-33.3v12.3h31.0v14.2h-31.0v16.2h33.3v14.2h-52.3",
    size: 52,
  },
  F: {
    path: "m42.8 40.8v30.4h-19.0v-71.2h52.3v14.3h-33.3v12.3h31.0v14.2h-31.0",
    size: 52,
  },
  G: {
    path: "m35.8 71.2-4.2-2.5-6.4-7.0-5.9-11.2-2.6-14.9 2.9-17.4 6.7-11.0 7.8-5.6 6.1-1.6h37.0v14.3h-35.5v42.7h21.3v-21.4h19.5c0.5 2.1 0.5 4.2 0.6 6.3l-0.3 5.6-1.4 7.0-2.9 8.0-4.8 8.7h-37.9",
    size: 66,
  },
  H: {
    path: "m64.7 71.2v-30.4h-29.4v30.4h-19.0v-71.2h19.0v26.5h29.4v-26.5h19.0v71.2h-19.0",
    size: 67,
  },
  I: {
    path: "m40.5 71.2v-71.2h19.0v71.2h-19.0",
    size: 19,
  },
  J: {
    path: "m40.5 71.2v-71.2h19.0v38.8l-0.9 12.3-1.9 10.3-1.9 7.1-0.9 2.6h-13.3",
    size: 19,
  },
  K: {
    path: "m66.7 74.8-1.8-1.8-4.1-5.2-5.0-9.0-4.2-12.8h-12.4l-1.1 10.8-1.9 8.6c-0.8 2.6-1.6 5.1-2.6 7.6h-13.2v-71.2h19.0v31.7h0.3l21.4-33.5 16.2 10.6-9.6 13.2-8.8 9.7h7.4l13.3 35.2-12.9 6.1",
    size: 59,
  },
  L: {
    path: "m23.7 71.2v-71.2h18.0v55.6l7.6-1.6 8.1-1.4 16.8-1.3 2.0 0.1v19.8h-52.6",
    size: 53,
  },
  M: {
    path: "m69.0 71.2v-27.5l-4.5 8.4-3.9 6.5-3.8 5.6h-13.4c-1.2-1.8-1.6-2.2-3.9-5.7l-4.0-6.6-4.5-8.4v27.7h-18.0v-71.2h18.0l19.1 48.2 19.0-48.2h18.0v71.2h-18.0",
    size: 74,
  },
  N: {
    path: "m63.8 71.2c-3.1-3.0-6.0-6.1-9.0-9.3l-4.2-4.8-4.6-5.6-9.7-13.1v32.8h-18.1v-71.2h18.1l27.5 44.8v-44.8h18.1v71.2h-18.1",
    size: 64,
  },
  O: {
    path: "m41.1 71.2-7.4-1.6-9.1-5.5-7.7-10.9-3.3-17.5 3.3-17.4 7.7-11.0 9.1-5.6 7.4-1.6h17.8l7.4 1.6 9.1 5.6 7.7 11.0 3.2 17.4-3.2 17.5-7.7 10.9-9.1 5.5-7.4 1.6h-17.8m20.9-56.9h-24.1v42.7h24.1v-42.7",
    size: 73,
  },
  P: {
    path: "m40.7 41.8-1.0 11.7-1.9 9.3-1.9 6.1-0.9 2.3h-13.2v-71.2h42.6l2.9 1.3 4.7 3.8 4.5 6.2 1.9 8.4-2.5 10.1-8.7 11.9h-26.4m15.6-27.5h-15.6v13.2h15.6v-13.2",
    size: 57,
  },
  Q: {
    path: "m40.0 0.0-7.4 1.6-9.2 5.6-7.8 11.0-3.3 17.4 3.3 17.5 7.8 10.9 9.2 5.5 7.4 1.6h16.5l5.7 7.3 6.1 6.3 4.8 4.2 1.9 1.7 12.6-9.7-12.9-17.3 7.5-10.8 3.1-17.2-3.3-17.4-7.7-11.0-9.2-5.6-7.4-1.6zm-4.6 14.3h27.1v42.7h-27.1z",
    size: 75,
  },
  R: {
    path: "m65.4 73.2-0.6-0.4-1.5-1.4-5.2-5.5-6.3-9.7-5.3-14.4h-5.1l-1.0 11.7-1.9 9.3-1.9 6.1-0.9 2.3h-13.2v-71.2h40.0l2.8 1.3 4.7 3.8 4.5 6.2 1.9 8.4-2.4 9.9-8.6 11.7 12.2 24.6-12.2 7.2m-11.0-58.9h-13.0v13.2h13.0v-13.2",
    size: 55,
  },
  S: {
    path: "m27.4 71.2v-14.2h26.5l-14.5-13.2-11.0-12.9-3.3-11.2 6.7-14.3 13.2-5.4h28.4v14.3h-29.0l9.4 8.5 8.3 8.0 7.7 8.2 5.0 14.2-1.8 9.2-6.0 8.7h-39.7",
    size: 50,
  },
  T: {
    path: "m40.9 71.2v-56.9h-17.0v-14.3h52.3v14.3h-17.2v56.9h-18.1",
    size: 52,
  },
  U: {
    path: "m60.4 0.0h18.1v47.0l-0.1 1.0-0.3 3.3c-0.6 3.1-1.9 5.9-3.2 8.8l-8.5 8.3-16.4 3.7-16.4-3.5-8.4-8.1-3.2-8.7-0.3-3.5-0.1-1.2v-47.2h18.1v58.1h20.8v-58.1",
    size: 57,
  },
  V: {
    path: "m21.5 71.2v-71.2h18.0v56.7h20.9v-56.7h18.0v44.9l-1.3 5.6-4.6 8.9-9.6 8.3-15.8 3.6z",
    size: 57,
  },
  W: {
    path: "m40.7 71.2v-4.2l-6.2 2.9-7.6 1.3h-19.6v-71.2h19.0v56.7h14.5v-56.7h18.0v56.7h14.9v-56.7h19.1v44.9l-1.4 5.6-4.9 8.9-10.0 8.3-16.0 3.6h-19.6",
    size: 85,
  },
  X: {
    path: "m60.5 71.2-0.4-28.6h-20.0l-0.5 28.6h-20.0v-12.0l0.3-3.0 1.3-5.9 2.9-7.1 5.2-7.0-5.2-5.7-2.9-5.9-1.3-5.0-0.2-1.9-0.1-1.3v-16.4h19.1l0.5 28.0h21.8l0.6-28.0h19.0v16.4l-0.3 2.7-1.3 4.8-2.9 6.0-5.1 5.9 5.1 6.8 2.9 7.1 1.3 5.9 0.3 3.5v12.0h-20.0",
    size: 61,
  },
  Y: {
    path: "m40.5 71.2v-29.7l-11.3-5.3-6.1-7.5-2.5-7.4-0.4-2.9-0.1-1.0v-17.4h19.0v28.2h21.9v-28.2h19.0v16.6l-0.3 2.7-0.3 1.4-2.5 7.4-6.1 7.8-11.3 5.6v29.7h-19.1",
    size: 60,
  },
  Z: {
    path: "m21.5 71.2v-14.2l29.0-42.7h-27.4v-14.3h53.4l0.1 1.7-0.2 3.1-0.6 4.0-4.4 11.1-4.6 7.4-6.6 8.5-9.0 9.9-12.0 11.3h39.4v14.2h-56.9",
    size: 57,
  },
};

// type GlyphName = keyof typeof KUROKANE;
// const kernings: Map<[GlyphName, GlyphName], number> = new Map();

kurokaneFont[" "] = { size: 20 };
kurokaneFont["A"].kernings = { Y: 2, G: 5, T: 2, V: 8, K: 8, B: 8 };
kurokaneFont["Y"].kernings = { A: 2 };
kurokaneFont["O"].kernings = { P: 5 };

const lineHeight = 70;
const defaultKerning = 12;
const frameSize = 100;

export function drawText(
  text: string,
  {
    pos = new Point(0, 0),
    fontSize = 16,
    fill = PALETTE.white,
    stroke = undefined,
  } = {}
) {
  const { ctx } = Stage;
  const scale = fontSize / frameSize;
  const { path, length } = engrave(text);

  ctx.save();
  ctx.translate(pos.x - length * 0.5 * scale, pos.y - lineHeight * 0.5 * scale);
  ctx.scale(scale, scale);
  if (fill) {
    ctx.fillStyle = fill;
    ctx.fill(path);
  }
  if (stroke) {
    ctx.strokeStyle = stroke;
    ctx.stroke(path);
  }
  ctx.restore();
}

export function engrave(text: string): { path: Path2D; length: number } {
  let length = 0;
  let prevChar: string;
  const acc = new Path2D();
  const mat = new DOMMatrix();

  Array.from(text).forEach((c) => {
    const C = c.toUpperCase();
    const { size = 0, path = "", kernings = {} } = kurokaneFont[C];
    const space = (frameSize - size) * 0.5;
    const p = new Path2D(path);
    p.closePath();

    if (prevChar) {
      const kerning = kernings[prevChar] ?? defaultKerning;
      mat.translateSelf(kerning, 0, 0);
      length += kerning;
    }

    mat.translateSelf(-space, 0, 0);
    acc.addPath(p, mat);
    mat.translateSelf(size, 0, 0);
    mat.translateSelf(space, 0, 0);

    length += size;
    prevChar = C;
  });

  return { path: acc, length };
}
